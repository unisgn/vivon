<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
  <display-name>Spring MVC</display-name>	
  
  <!--  Spring 服务层的配置文件 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml, classpath:springSecurity.xml</param-value>
    </context-param>
    <context-param>
    	<param-name>log4jConfigLocation</param-name>
    	<param-value>classpath:log4j.properties</param-value> 
    </context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>3000</param-value>
	</context-param>
	
	
	
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<!-- spring 加载方式1：ContextLoaderListener, to load/enable spring framework，从context-param中寻找配置文件进行加载运行 -->
  	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	

	
	
	<!--
		org.springframework.orm.hibernate3.support.OpenSessionInViewFilter
		延迟加载的实现的原理是cglib动态字节码
  		Hibernate对延迟加载的实现原理是CGLIB动态字节码生成技术，即返回的实体并非真正的实体对象，而是经过CGLIB处理后的代理实体，当调用某一未经加载的属性时，代理实体就可以截获这一调用，然后由Hibernate实现动态加载。
  
  		如果要使用Hibernate的延迟加载特性，则渲染视图阶段不能关闭事务，因此，事务的范围变为整个HTTP请求的周期。
  
  		采用OpenSessionInView模式可以将事务范围界定在请求开始和渲染视图结束后，使得Hibernate的Session在视图渲染时仍有效。有两种方式实现OpenSessionInView模式，一种是使用Spring提供的OpenSessionInViewInterceptor，如果采用Spring MVC框架，可以将这个Interceptor加入到Controller的拦截器链中，事务在Controller处理前开始，在视图渲染后结束，如图11-17所示。
  
  		如果Web层没有采用Spring的MVC框架，而是使用Struts等其他MVC框架，甚至没有使用MVC框架，此时，就无法定义Interceptor，只能采用Filter来实现OpenSessionInView模式。
		  
		OpenSessionInViewFilter是Spring提供的一个Filter。在OpenSessionInViewFilter模式下，所有的HTTP请求都将被OpenSessionInViewFilter截获，事务在请求处理前开始，在请求处理完毕后结束，而不管采用何种MVC框架，甚至直接使用JSP，如图11-18所示。
		  
		org.springframework.orm.hibernate3.support.OpenSessionInViewFilter(延迟加载，)
		  
		两种方式各有优劣。OpenSessionInViewInterceptor只能用于Spring MVC，但是配置简单，无须过滤URL；OpenSessionInViewFilter适用范围更广，但是必须手动配置web.xml文件，并且必须正确过滤URL。
		  
		无论如何，采用以上两种方式的目的都是为了使用Hibernate的延迟加载特性。由于事务也是一种数据库资源，事务持续的时间越久，数据库资源被锁定也越久，应用程序的吞吐量就会降低。因此，要尽量将事务限定在最小的范围内
  
 
	<filter>
		<filter-name>OpenSessionInView</filter-name>
		<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
		<init-param>
            <param-name>sessionFactoryBeanName</param-name>
            <param-value>sessionFactory</param-value>
        </init-param>
	</filter>
	
	<filter-mapping>
   		<filter-name>OpenSessionInView</filter-name>
   		<url-pattern>/rest/*</url-pattern>
	</filter-mapping>
--> 	
	
	<!-- filter: setChracterEncoding -->
	<filter>
		<filter-name>SetCharacterEncoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>SetCharacterEncoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	 
	<!--  Spring加载方式2： ContextLoaderServlet，
		它从init-param中寻找指定的配置文件，若无指定，则默认加载/WEB-INF/${servlet-name}-servlet.xml;此处加载启动Spring MVC模块-->    
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc-servlet.xml</param-value>
		</init-param>
        <load-on-startup>1</load-on-startup>
	</servlet>
 
 	<servlet-mapping>
 		<servlet-name>springmvc</servlet-name>
 		<url-pattern>/*</url-pattern>
 	</servlet-mapping>
 	
 	<welcome-file-list>
  		<welcome-file>index.jsp</welcome-file>
 	</welcome-file-list>
 	
 	<login-config>
  		<auth-method>BASIC</auth-method>
 	</login-config>
</web-app>
